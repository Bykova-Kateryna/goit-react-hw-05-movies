{"version":3,"file":"static/js/313.8d9aa68e.chunk.js","mappings":"8LAEaA,E,OAAgBC,GAAAA,IAAH,8F,SCAbC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,KAIhB,C,qJCdYC,EAAkBT,EAAAA,GAAAA,KAAH,mNAWfU,EAAiBV,EAAAA,GAAAA,OAAH,qPAcdW,EAAmBX,EAAAA,GAAAA,MAAH,qJ,kBCmE7B,EA/Ee,WAAO,IAAD,EACnB,GAA4CY,EAAAA,EAAAA,UAAS,MAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAsCC,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAM,UAAGF,EAAYG,IAAI,gBAAnB,QAA+B,GAC3C,GAAsCT,EAAAA,EAAAA,UAASQ,GAA/C,eAAOE,EAAP,KAAoBC,EAApB,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACO,KAAXN,IACFJ,GAAW,GACXW,MAAM,GAAD,OAdC,gCAcD,gCAbK,mCAaL,kBAC4CP,EAD5C,oBAGFQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAAG,GACuB,IAAvBA,EAAKC,cAQTlB,EAAkBiB,EAAKE,SAPrBC,EAAAA,OAAAA,KAAA,UACKd,EADL,eAEE,8BACA,OAKL,IACAe,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,SAAQ,kBAAMvB,GAAW,EAAjB,IAEd,GAAE,CAACI,IAeJ,OACE,iCACE,UAACX,EAAD,CAAiB+B,SAXU,SAAAC,GAC7BA,EAAMC,iBACNvB,EAAe,CAAEwB,MAAOF,EAAMG,OAAOC,SAASzB,OAAO0B,QACH,KAA9CL,EAAMG,OAAOC,SAASzB,OAAO0B,MAAMC,QACrCC,EAAAA,OAAAA,QAAe,iCAGlB,EAIG,WACE,SAACrC,EAAD,CACEsC,KAAK,OACLC,KAAK,SACLC,aAAa,MACbC,WAAS,EACTC,SArBa,SAAAZ,GACnBlB,EAAekB,EAAMa,cAAcR,MACpC,EAoBOA,MAAOxB,KAET,SAACZ,EAAD,CAAgBuC,KAAK,SAArB,uBAGDlC,IAAW,SAACd,EAAA,EAAD,KACZ,SAAC,EAAAsD,SAAD,CAAUC,UAAU,SAACvD,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,OAGF,8BACE,wBACGY,GACCA,EAAe4C,KAAI,SAAAC,GAAK,OACtB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMtC,GAAhD,SACGkC,EAAMK,kBAFFL,EAAME,GADO,UAWnC,C","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/Movies/Movies.styled.js","components/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderSection = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;","import { Hearts } from 'react-loader-spinner';\nimport { LoaderSection } from './Loader.styled';\nexport const Loader = () => {\n  return (\n    <LoaderSection>\n      <Hearts\n        height=\"80\"\n        width=\"80\"\n        color=\"#2384F5\"\n        ariaLabel=\"hearts-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </LoaderSection>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SearchMovieForm = styled.form`\n  display: flex;\n  align-items: center;\n  max-width: 400px;\n  background-color: transparent;\n  border-radius: 3px;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  margin-left: 15px;\n`;\n\nexport const SearchMovieBtn = styled.button`\n  display: inline-block;\n  cursor: pointer;\n  height: 27px;\n  margin-left: 15px;\n  border: 2px, solid, #abb4be;\n\n  &:hover {\n    background-color: #2384f5;\n    color: #fff;\n    border: 2px, solid, #abb4be;\n  }\n`;\n\nexport const SearchMovieInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 14px;\n  padding-left: 4px;\n  padding-right: 4px;\n`;\n","import { Suspense, useState } from 'react';\nimport { Link, useLocation, useSearchParams, Outlet } from 'react-router-dom';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Report } from 'notiflix/build/notiflix-report-aio';\nimport {\n  SearchMovieForm,\n  SearchMovieBtn,\n  SearchMovieInput,\n} from './Movies.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\n\nconst URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '2aeb67ea92a5fcd35004195f81b34bb6';\n\nconst Movies = () => {\n  const [searchesMovies, setSearchesMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchQuery, setSearchQuery] = useSearchParams();\n  const search = searchQuery.get('query') ?? '';\n  const [searchInput, setSearchInput] = useState(search);\n  const location = useLocation();\n\n  useEffect(() => {\n    if (search !== '') {\n      setLoading(true);\n      fetch(\n        `${URL}search/movie?api_key=${API_KEY}&query=${search}&language=en-US`\n      )\n        .then(response => response.json())\n        .then(data => {\n          if (data.total_results === 0) {\n            Report.info(\n              `${search} not found.`,\n              'Please enter another movie.',\n              'Okay'\n            );\n            return;\n          }\n          setSearchesMovies(data.results);\n        })\n        .catch(error => console.log(error))\n        .finally(() => setLoading(false));\n    }\n  }, [search]);\n\n  const handleChange = event => {\n    setSearchInput(event.currentTarget.value);\n  };\n\n  const handleSubmitSearchInfo = event => {\n    event.preventDefault();\n    setSearchQuery({ query: event.target.children.search.value });\n    if (event.target.children.search.value.trim() === '') {\n      Notify.failure('Please enter the search field.');\n      return;\n    }\n  };\n\n  return (\n    <>\n      <SearchMovieForm onSubmit={handleSubmitSearchInfo}>\n        <SearchMovieInput\n          type=\"text\"\n          name=\"search\"\n          autocomplete=\"off\"\n          autoFocus\n          onChange={handleChange}\n          value={searchInput}\n        />\n        <SearchMovieBtn type=\"submit\">Search</SearchMovieBtn>\n      </SearchMovieForm>\n\n      {loading && <Loader />}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n\n      <section>\n        <ul>\n          {searchesMovies &&\n            searchesMovies.map(movie => (\n              <li key={movie.id}>\n                <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                  {movie.original_title}\n                </Link>\n              </li>\n            ))}\n        </ul>\n      </section>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["LoaderSection","styled","Loader","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","SearchMovieForm","SearchMovieBtn","SearchMovieInput","useState","searchesMovies","setSearchesMovies","loading","setLoading","useSearchParams","searchQuery","setSearchQuery","search","get","searchInput","setSearchInput","location","useLocation","useEffect","fetch","then","response","json","data","total_results","results","Report","catch","error","console","log","finally","onSubmit","event","preventDefault","query","target","children","value","trim","Notify","type","name","autocomplete","autoFocus","onChange","currentTarget","Suspense","fallback","map","movie","to","id","state","from","original_title"],"sourceRoot":""}