{"version":3,"file":"static/js/313.bb22da74.chunk.js","mappings":"8LAEaA,E,OAAgBC,GAAAA,IAAH,8F,SCAbC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,KAIhB,C,qJCdYC,EAAkBT,EAAAA,GAAAA,KAAH,mNAWfU,EAAiBV,EAAAA,GAAAA,OAAH,qPAcdW,EAAmBX,EAAAA,GAAAA,MAAH,qJ,kBC+D7B,EA5Ee,WACb,OAA4BY,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4CF,EAAAA,EAAAA,UAAS,MAArD,eAAOG,EAAP,KAAuBC,EAAvB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAAsCC,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACAD,EAAYE,IAAI,SAChB,IAAMC,GAAWC,EAAAA,EAAAA,MAgCjB,OACE,gCACyB,YAAtBD,EAASE,WACR,UAAChB,EAAD,CAAiBiB,SA9BQ,SAAAC,GAC7BA,EAAMC,iBACgB,KAAlBf,EAAOgB,QAIXR,EAA0B,KAAXR,EAAgB,CAAEiB,MAAOjB,GAAW,CAAC,GACpDK,GAAW,GACXa,MAAM,GAAD,OAtBG,gCAsBH,gCArBO,mCAqBP,kBAC4ClB,EAD5C,oBAGFmB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAAG,GACuB,IAAvBA,EAAKC,cAQTpB,EAAkBmB,EAAKE,SAPrBC,EAAAA,OAAAA,KAAA,UACKzB,EADL,eAEE,8BACA,OAKL,IACA0B,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,SAAQ,kBAAM7B,EAAU,GAAhB,GAAqBI,GAAW,KArBzC0B,EAAAA,OAAAA,QAAe,iCAsBlB,EAKK,WACE,SAACjC,EAAD,CACEkC,KAAK,OACLC,KAAK,SACLC,aAAa,MACbC,WAAS,EACTC,SAxCW,SAAAtB,GACnBb,EAAUa,EAAMuB,cAAcC,MAC/B,EAuCSA,MAAOtC,KAET,SAACH,EAAD,CAAgBmC,KAAK,SAArB,uBAGH5B,IAAW,SAAChB,EAAA,EAAD,KACZ,SAAC,EAAAmD,SAAD,CAAUC,UAAU,SAACpD,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,MAGqB,YAAtBsB,EAASE,WACR,8BACE,wBACGV,GACCA,EAAeuC,KAAI,SAAAC,GAAK,OACtB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMpC,GAAhD,SACGgC,EAAMK,kBAFFL,EAAME,GADO,UAYrC,C","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/Movies/Movies.styled.js","components/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderSection = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;","import { Hearts } from 'react-loader-spinner';\nimport { LoaderSection } from './Loader.styled';\nexport const Loader = () => {\n  return (\n    <LoaderSection>\n      <Hearts\n        height=\"80\"\n        width=\"80\"\n        color=\"#2384F5\"\n        ariaLabel=\"hearts-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n    </LoaderSection>\n  );\n};\n","import styled from 'styled-components';\n\nexport const SearchMovieForm = styled.form`\n  display: flex;\n  align-items: center;\n  max-width: 400px;\n  background-color: transparent;\n  border-radius: 3px;\n  margin-top: 24px;\n  margin-bottom: 24px;\n  margin-left: 15px;\n`;\n\nexport const SearchMovieBtn = styled.button`\n  display: inline-block;\n  cursor: pointer;\n  height: 27px;\n  margin-left: 15px;\n  border: 2px, solid, #abb4be;\n\n  &:hover {\n    background-color: #2384f5;\n    color: #fff;\n    border: 2px, solid, #abb4be;\n  }\n`;\n\nexport const SearchMovieInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 14px;\n  padding-left: 4px;\n  padding-right: 4px;\n`;\n","import { Suspense, useState } from 'react';\nimport { Link, useLocation, useSearchParams, Outlet } from 'react-router-dom';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Report } from 'notiflix/build/notiflix-report-aio';\nimport {\n  SearchMovieForm,\n  SearchMovieBtn,\n  SearchMovieInput,\n} from './Movies.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '2aeb67ea92a5fcd35004195f81b34bb6';\n\nconst Movies = () => {\n  const [search, setSearch] = useState('');\n  const [searchesMovies, setSearchesMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [searchQuery, setSearchQuery] = useSearchParams();\n  searchQuery.get('query');\n  const location = useLocation();\n  const handleChange = event => {\n    setSearch(event.currentTarget.value);\n  };\n\n  const handleSubmitSearchInfo = event => {\n    event.preventDefault();\n    if (search.trim() === '') {\n      Notify.failure('Please enter the search field.');\n      return;\n    }\n    setSearchQuery(search !== '' ? { query: search } : {});\n    setLoading(true);\n    fetch(\n      `${URL}search/movie?api_key=${API_KEY}&query=${search}&language=en-US`\n    )\n      .then(response => response.json())\n      .then(data => {\n        if (data.total_results === 0) {\n          Report.info(\n            `${search} not found.`,\n            'Please enter another movie.',\n            'Okay'\n          );\n          return;\n        }\n        setSearchesMovies(data.results);\n      })\n      .catch(error => console.log(error))\n      .finally(() => setSearch(''), setLoading(false));\n  };\n\n  return (\n    <>\n      {location.pathname === '/movies' && (\n        <SearchMovieForm onSubmit={handleSubmitSearchInfo}>\n          <SearchMovieInput\n            type=\"text\"\n            name=\"search\"\n            autocomplete=\"off\"\n            autoFocus\n            onChange={handleChange}\n            value={search}\n          />\n          <SearchMovieBtn type=\"submit\">Search</SearchMovieBtn>\n        </SearchMovieForm>\n      )}\n      {loading && <Loader />}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n\n      {location.pathname === '/movies' && (\n        <section>\n          <ul>\n            {searchesMovies &&\n              searchesMovies.map(movie => (\n                <li key={movie.id}>\n                  <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                    {movie.original_title}\n                  </Link>\n                </li>\n              ))}\n          </ul>\n        </section>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["LoaderSection","styled","Loader","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","SearchMovieForm","SearchMovieBtn","SearchMovieInput","useState","search","setSearch","searchesMovies","setSearchesMovies","loading","setLoading","useSearchParams","searchQuery","setSearchQuery","get","location","useLocation","pathname","onSubmit","event","preventDefault","trim","query","fetch","then","response","json","data","total_results","results","Report","catch","error","console","log","finally","Notify","type","name","autocomplete","autoFocus","onChange","currentTarget","value","Suspense","fallback","map","movie","to","id","state","from","original_title"],"sourceRoot":""}